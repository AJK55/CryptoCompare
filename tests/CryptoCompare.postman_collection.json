{
	"info": {
		"_postman_id": "42165b9a-d1d8-46a0-86c9-dfb45d0e260f",
		"name": "CryptoCompare",
		"description": "https://www.cryptocompare.com/api/",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CoinList",
			"item": [
				{
					"name": "CoinList",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cd112b9-bfa6-49b1-9274-90fbe6a412f2",
								"exec": [
									"var pass = true;",
									"var fail = false;",
									"var data = JSON.parse(responseBody);",
									"var cookies = responseCookies;",
									"var headers = responseHeaders;",
									"var headersObject = Object.keys(headers);",
									"var response = data.Response;",
									"var message = data.Message;",
									"var baseImageUrl = data.BaseImageUrl;",
									"var baseLinkUrl = data.BaseLinkUrl;",
									"var bodyData = data.Data;",
									"//console.log(data)",
									"",
									"/*",
									"if (Object.keys(bodyData).length === 3130) {",
									"    tests[\"Number of BodyData Objects = \" + Object.keys(bodyData).length] = pass;",
									"}",
									"else",
									"    tests[\"Number of BodyData Objects = \" + Object.keys(bodyData).length] = fail;",
									"*/",
									"",
									"if (headersObject.length === 12) {",
									"    tests[\"Number of Header Objects = \" + headersObject.length] = pass;",
									"}",
									"else",
									"    tests[\"Number of Header Objects = \" + headersObject.length] = fail;",
									"",
									"if (response === \"Success\") {",
									"    tests[\"Response = \" + response] = pass;",
									"}",
									"else",
									"    tests[\"Response = \" + response] = fail;",
									"",
									"if (message === \"Coin list succesfully returned!\") {",
									"    tests[\"Message = \" + message] = pass;",
									"}",
									"else",
									"    tests[\"Message = \" + message] = fail;",
									"",
									"if (baseImageUrl === \"https://www.cryptocompare.com\") {",
									"    tests[\"BaseImageUrl = \" + baseImageUrl] = pass;",
									"}",
									"else ",
									"    tests[\"BaseImageUrl = \" + baseImageUrl] = fail;",
									"    ",
									"if (baseLinkUrl === \"https://www.cryptocompare.com\") {",
									"    tests[\"BaseLinkUrl = \" + baseLinkUrl] = pass;",
									"}",
									"else",
									"    tests[\"BaseLinkUrl = \" + baseLinkUrl] = fail;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "{{url}}{{coinlist}}",
							"host": [
								"{{url}}{{coinlist}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5929048f-72d1-40d2-80ed-7239bc474dcb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3fdbac08-9ab4-4345-8999-108e3b3b8be4",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Price",
			"item": [
				{
					"name": "Single Symbol Price",
					"item": [
						{
							"name": "Single Symbol Price - BTC",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c3d9569-7b97-44b8-8631-4fe583b3cc9d",
										"exec": [
											"var pass = true;",
											"var fail = false;",
											"var _ = require('lodash');",
											"var data = JSON.parse(responseBody);",
											"var header = responseHeaders;",
											"var objects = Object.keys(data)",
											"var BTC = data.BTC;",
											"",
											"if (BTC === 1) {",
											"    tests[\"BTC = \" + BTC] = pass;",
											"}",
											"else",
											"    tests[\"BTC = \" + BTC] = fail;",
											"",
											"if (objects.length === 5) {",
											"    tests[\"Number of Objects Returned = \" + objects.length] = pass;",
											"}",
											"else",
											"    tests[\"Number of Objects Returned = \" + objects.length] = fail;",
											"",
											"if (header['Content-Type'] === \"application/json; charset=UTF-8\") {",
											"    tests[\"Header Content-Type = \" + header['Content-Type'] ] = pass;",
											"}",
											"else",
											"    tests[\"Header Content-Type = \" + header['Content-Type'] ] = fail;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f72a1f83-4994-427b-a95c-7bd10131b5d2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}{{price}}{{fsym}}{{BTC}}{{tsyms}}{{USD}},{{JPY}},{{EUR}},{{BTC}},{{ETH}}",
									"host": [
										"{{url}}{{price}}{{fsym}}{{BTC}}{{tsyms}}{{USD}},{{JPY}},{{EUR}},{{BTC}},{{ETH}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Symbol Price - ETH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c3d9569-7b97-44b8-8631-4fe583b3cc9d",
										"exec": [
											"var pass = true;",
											"var fail = false;",
											"var _ = require('lodash');",
											"var data = JSON.parse(responseBody);",
											"var header = responseHeaders;",
											"var objects = Object.keys(data)",
											"var ETH = data.ETH;",
											"",
											"if (ETH === 1) {",
											"    tests[\"ETH = \" + ETH] = pass;",
											"}",
											"else",
											"    tests[\"ETH = \" + ETH] = fail;",
											"",
											"if (objects.length === 5) {",
											"    tests[\"Number of Objects Returned = \" + objects.length] = pass;",
											"}",
											"else",
											"    tests[\"Number of Objects Returned = \" + objects.length] = fail;",
											"",
											"",
											"if (header['Content-Type'] === \"application/json; charset=UTF-8\") {",
											"    tests[\"Header Content-Type = \" + header['Content-Type'] ] = pass;",
											"}",
											"else",
											"    tests[\"Header Content-Type = \" + header['Content-Type'] ] = fail;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f72a1f83-4994-427b-a95c-7bd10131b5d2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}{{price}}{{fsym}}{{ETH}}{{tsyms}}{{USD}},{{JPY}},{{EUR}},{{BTC}},{{ETH}}",
									"host": [
										"{{url}}{{price}}{{fsym}}{{ETH}}{{tsyms}}{{USD}},{{JPY}},{{EUR}},{{BTC}},{{ETH}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Single Symbol Price plus Exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5c3d9569-7b97-44b8-8631-4fe583b3cc9d",
										"exec": [
											"var pass = true;",
											"var fail = false;",
											"var _ = require('lodash');",
											"var data = JSON.parse(responseBody);",
											"var header = responseHeaders;",
											"var objects = Object.keys(data)",
											"var BTC = data.BTC;",
											"",
											"if (BTC === 1) {",
											"    tests[\"BTC = \" + BTC] = pass;",
											"}",
											"else",
											"    tests[\"BTC = \" + BTC] = fail;",
											"",
											"if (objects.length === 5) {",
											"    tests[\"Number of Objects Returned = \" + objects.length] = pass;",
											"}",
											"else",
											"    tests[\"Number of Objects Returned = \" + objects.length] = fail;",
											"",
											"",
											"if (header['Content-Type'] === \"application/json; charset=UTF-8\") {",
											"    tests[\"Header Content-Type = \" + header['Content-Type'] ] = pass;",
											"}",
											"else",
											"    tests[\"Header Content-Type = \" + header['Content-Type'] ] = fail;"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f72a1f83-4994-427b-a95c-7bd10131b5d2",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}{{price}}{{fsym}}{{BTC}}{{tsyms}}{{USD}},{{JPY}},{{EUR}},{{BTC}},{{ETH}}&{{CB}}",
									"host": [
										"{{url}}{{price}}{{fsym}}{{BTC}}{{tsyms}}{{USD}},{{JPY}},{{EUR}},{{BTC}},{{ETH}}&{{CB}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Multiple Symbols Price",
					"item": [
						{
							"name": "Multiple Symbols Price - ETH & DASH",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e137cffb-083e-407f-ac0e-28f81357b875",
										"exec": [
											"var pass = true;",
											"var fail = false;",
											"var _ = require('lodash');",
											"var data = JSON.parse(responseBody);",
											"var objects = Object.keys(data);",
											"",
											"",
											"if (Object.keys(data.ETH).length=== 5) {",
											"    tests[\"Number of ETH Objects returned = \" + Object.keys(data.ETH).length] = pass;",
											"}",
											"else",
											"    tests[\"Number of ETH Objects returned = \" + Object.keys(data.ETH).length] = fail;",
											"",
											"if (Object.keys(data.DASH).length=== 5) {",
											"    tests[\"Number of DASH Objects returned = \" + Object.keys(data.DASH).length] = pass;",
											"}",
											"else",
											"    tests[\"Number of DASH Objects returned = \" + Object.keys(data.DASH).length] = fail;",
											"",
											"if (_.includes(objects, 'ETH' )) {",
											"    tests[\"ETH returned in \" + objects] = pass;",
											"}",
											"else",
											"    tests[\"ETH returned in \" + objects] = fail;",
											"",
											"if (_.includes(objects, 'DASH' )) {",
											"    tests[\"DASH returned in \" + objects] = pass;",
											"}",
											"else",
											"    tests[\"DASH returned in \" + objects] = fail;",
											"",
											"if (data.ETH.ETH === 1 ) {",
											"    tests[\"ETH ETH = \" + data.ETH.ETH] = pass;",
											"}",
											"else",
											"    tests[\"ETH ETH = \" + data.ETH.ETH] = fail;",
											"",
											"if (data.DASH.DASH === 1 ) {",
											"    tests[\"DASH DASH = \" + data.DASH.DASH] = pass;",
											"}",
											"else",
											"    tests[\"DASH DASH = \" + data.DASH.DASH] = fail;",
											"",
											"",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}{{priceM}}{{fsyms}}{{ETH}},{{DASH}}{{tsyms}}{{BTC}},{{USD}},{{EUR}},{{DASH}},{{ETH}}",
									"host": [
										"{{url}}{{priceM}}{{fsyms}}{{ETH}},{{DASH}}{{tsyms}}{{BTC}},{{USD}},{{EUR}},{{DASH}},{{ETH}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Multiple Symbols Price - DASH & ETH & BTC",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16edcead-b3c0-42ab-8183-c1260ef71af6",
										"exec": [
											"var pass = true;",
											"var fail = false;",
											"var _ = require('lodash');",
											"var data = JSON.parse(responseBody);",
											"var objects = Object.keys(data);",
											"",
											"",
											"if (Object.keys(data.ETH).length=== 6) {",
											"    tests[\"Number of ETH Objects returned = \" + Object.keys(data.ETH).length] = pass;",
											"}",
											"else",
											"    tests[\"Number of ETH Objects returned = \" + Object.keys(data.ETH).length] = fail;",
											"",
											"if (Object.keys(data.DASH).length=== 6) {",
											"    tests[\"Number of DASH Objects returned = \" + Object.keys(data.DASH).length] = pass;",
											"}",
											"else",
											"    tests[\"Number of DASH Objects returned = \" + Object.keys(data.DASH).length] = fail;",
											"",
											"if (_.includes(objects, 'ETH' )) {",
											"    tests[\"ETH returned in \" + objects] = pass;",
											"}",
											"else",
											"    tests[\"ETH returned in \" + objects] = fail;",
											"",
											"if (_.includes(objects, 'DASH' )) {",
											"    tests[\"DASH returned in \" + objects] = pass;",
											"}",
											"else",
											"    tests[\"DASH returned in \" + objects] = fail;",
											"",
											"if (data.ETH.ETH === 1 ) {",
											"    tests[\"ETH ETH = \" + data.ETH.ETH] = pass;",
											"}",
											"else",
											"    tests[\"ETH ETH = \" + data.ETH.ETH] = fail;",
											"",
											"if (data.DASH.DASH === 1 ) {",
											"    tests[\"DASH DASH = \" + data.DASH.DASH] = pass;",
											"}",
											"else",
											"    tests[\"DASH DASH = \" + data.DASH.DASH] = fail;",
											"",
											"",
											"    "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}{{priceM}}{{fsyms}}{{DASH}},{{ETH}},{{BTC}}{{tsyms}}{{BTC}},{{USD}},{{EUR}},{{JPY}},{{ETH}},{{DASH}}",
									"host": [
										"{{url}}{{priceM}}{{fsyms}}{{DASH}},{{ETH}},{{BTC}}{{tsyms}}{{BTC}},{{USD}},{{EUR}},{{JPY}},{{ETH}},{{DASH}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Multiple Symbols Price plus Exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16edcead-b3c0-42ab-8183-c1260ef71af6",
										"exec": [
											"var pass = true;",
											"var fail = false;",
											"var data = JSON.parse(responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}{{priceM}}{{fsyms}}{{BTC}},{{ETH}}{{tsyms}}{{USD}}{{e}}{{CB}}",
									"host": [
										"{{url}}{{priceM}}{{fsyms}}{{BTC}},{{ETH}}{{tsyms}}{{USD}}{{e}}{{CB}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Multiple Symbols Full Data",
					"item": [
						{
							"name": "Multiple Symbols Full Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e137cffb-083e-407f-ac0e-28f81357b875",
										"exec": [
											"var pass = true;",
											"var fail = false;",
											"var data = JSON.parse(responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}{{priceMF}}{{fsyms}}{{ETH}},{{DASH}}{{tsyms}}{{BTC}},{{USD}},{{EUR}}",
									"host": [
										"{{url}}{{priceMF}}{{fsyms}}{{ETH}},{{DASH}}{{tsyms}}{{BTC}},{{USD}},{{EUR}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Multiple Symbols Full Data - DASH & ETH & BTC",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16edcead-b3c0-42ab-8183-c1260ef71af6",
										"exec": [
											"var pass = true;",
											"var fail = false;",
											"var data = JSON.parse(responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}{{priceMF}}{{fsyms}}{{DASH}},{{ETH}},{{BTC}}{{tsyms}}{{BTC}},{{USD}},{{EUR}},{{JPY}}",
									"host": [
										"{{url}}{{priceMF}}{{fsyms}}{{DASH}},{{ETH}},{{BTC}}{{tsyms}}{{BTC}},{{USD}},{{EUR}},{{JPY}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Multiple Symbols Full Data plus Exchange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "16edcead-b3c0-42ab-8183-c1260ef71af6",
										"exec": [
											"var pass = true;",
											"var fail = false;",
											"var data = JSON.parse(responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}{{priceMF}}{{fsyms}}{{BTC}},{{ETH}}{{tsyms}}{{USD}}{{e}}{{CB}}",
									"host": [
										"{{url}}{{priceMF}}{{fsyms}}{{BTC}},{{ETH}}{{tsyms}}{{USD}}{{e}}{{CB}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Generate Custom Average",
					"item": [
						{
							"name": "Generate Custom Average",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31f1093b-343f-47ff-b0a0-2aad28a4d2ea",
										"exec": [
											"var pass = true;",
											"var fail = false;",
											"var data = JSON.parse(responseBody);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"body": {},
								"url": {
									"raw": "{{url}}{{avg}}{{fsym}}{{BTC}}{{tsym}}{{USD}}{{e}}{{CB}},{{BF}}",
									"host": [
										"{{url}}{{avg}}{{fsym}}{{BTC}}{{tsym}}{{USD}}{{e}}{{CB}},{{BF}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Generate Custom Average - Poloniex,Bitfinex",
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{url}}{{avg}}{{fsym}}{{ZEC}}{{tsym}}{{USD}}{{e}}{{P}},{{BF}}",
									"host": [
										"{{url}}{{avg}}{{fsym}}{{ZEC}}{{tsym}}{{USD}}{{e}}{{P}},{{BF}}"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"description": "Get the current price of any cryptocurrency in any other currency that you need.\r\nIf the crypto does not trade directly into the toSymbol requested, BTC will be used for conversion. If the opposite pair trades we invert it (eg.: BTC-XMR)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c2faa922-8a73-45e2-b6ee-13e94619b9bf",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f8caf584-c7a1-4873-9980-7780489d55b2",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Historical Data",
			"item": [
				{
					"name": "Historical Daily OHLCV",
					"item": [],
					"description": "Get open, high, low, close, volumefrom and volumeto from the daily historical data.The values are based on 00:00 GMT time.It uses BTC conversion if data is not available because the coin is not trading in the specified currency.",
					"_postman_isSubFolder": true
				},
				{
					"name": "Historical Hourly OHLCV",
					"item": [],
					"description": "Get open, high, low, close, volumefrom and volumeto from the hourly historical data. It uses BTC conversion if data is not available because the coin is not trading in the specified currency.",
					"_postman_isSubFolder": true
				},
				{
					"name": "Historical Minute OHLCV",
					"item": [],
					"description": "Get open, high, low, close, volumefrom and volumeto from the each minute historical data. This data is only stored for 7 days, if you need more, use the hourly or daily path.\r\n\r\nIt uses BTC conversion if data is not available because the coin is not trading in the specified currency.",
					"_postman_isSubFolder": true
				},
				{
					"name": "Historical Day OHLCV for a timestamp",
					"item": [],
					"description": "Get the price of any cryptocurrency in any other currency that you need at a given timestamp. The price comes from the daily info - so it would be the price at the end of the day GMT based on the requested TS.\r\nIf the crypto does not trade directly into the toSymbol requested, BTC will be used for conversion. Tries to get direct trading pair data, if there is none or it is more than 10 days before the ts requested, it uses BTC conversion. If the opposite pair trades we invert it (eg.: BTC-XMR)\r\nThe calculation types are:\r\nClose - a Close of the day close price\r\nMidHighLow - the average between the 24 H high and low\r\nVolFVolT - the total volume to / the total volume from",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "80fd6170-9d1d-4c52-94ed-06497299000a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c040fa3b-d6f0-429a-b591-1d779ba22120",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Historical Day Average Price",
					"item": [],
					"description": "Get day average price. The values are based on hourly vwap data and the average can be calculated in different ways. It uses BTC conversion if data is not available because the coin is not trading in the specified currency. If tryConversion is set to false it will give you the direct data. If no toTS is given it will automatically do the current day. Also for different timezones use the UTCHourDiff param \r\nThe calculation types are: \r\nHourVWAP - a VWAP of the hourly close price\r\nMidHighLow - the average between the 24 H high and low.\r\nVolFVolT - the total volume from / the total volume to (only avilable with tryConversion set to false so only for direct trades but the value should be the most accurate average day price)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4bacad8c-f7a1-4351-b2d2-b68596019edb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fdf92a97-8299-4c13-a1b0-f29024611451",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Historical Daily Exchange Volume",
					"item": [],
					"description": "Get total volume from the daily historical exchange data.The values are based on 00:00 GMT time. We store the data in BTC and we multiply by the BTC-tsym value",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9c9b326a-07da-4277-909e-61c0bc3e9867",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fdac87e3-a742-4671-ac99-6a3b26ececfd",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Historical Hourly Exchange Volume",
					"item": [],
					"description": "Get total volume from the hourly historical exchange data.We store the data in BTC and we multiply by the BTC-tsym value",
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e53432f4-d6d8-4563-b8de-1ebe5c88696c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "83ef0265-d4ad-4d44-9cea-8afe45a2a26e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		}
	]
}